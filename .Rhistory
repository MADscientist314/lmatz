plot(nmds)
plot(en)
################################################################################
#extract NMDS scores (x and y coordinates) for sites from newer versions of vegan package
data.scores = as.data.frame(scores(nmds)$sites)
#add 'season' column as before
data.scores$BMI = env$BMI
data.scores
data.scores$Diabetes_Status = env$Diabetes_Status
data.scores
gg = ggplot(data = data.scores, aes(x = NMDS1, y = NMDS2)) +
geom_point(data = data.scores, aes(colour = Diabetes_Status), size = 3, alpha = 0.5) +
scale_colour_manual(values = my_pal)+#c("orange", "steelblue"))  +
geom_segment(aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
data = en_coord_cont, size =1, alpha = 0.5, colour = "grey30") +
geom_point(data = en_coord_cat, aes(x = NMDS1, y = NMDS2),
shape = "diamond", size = 4, alpha = 0.6, colour = "navy") +
geom_text(data = en_coord_cat, aes(x = NMDS1, y = NMDS2+0.04),
label = row.names(en_coord_cat), colour = "navy", fontface = "bold") +
geom_text(data = en_coord_cont, aes(x = NMDS1, y = NMDS2), colour = "grey30",
fontface = "bold", label = row.names(en_coord_cont)) +
theme(axis.title = element_text(size = 10, face = "bold", colour = "grey30"),
panel.background = element_blank(), panel.border = element_rect(fill = NA, colour = "grey30"),
axis.ticks = element_blank(), axis.text = element_blank(), legend.key = element_blank(),
legend.title = element_text(size = 10, face = "bold", colour = "grey30"),
legend.text = element_text(size = 9, colour = "grey30")) +
labs(colour = "Diabetes_Status")
gg = ggplot(data = data.scores, aes(x = NMDS1, y = NMDS2)) +
geom_point(data = data.scores, aes(colour = Diabetes_Status), size = 3, alpha = 0.5) +
scale_colour_manual(values = my_pal)#c("orange", "steelblue"))  +
gg
geom_segment(aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
data = en_coord_cont, size =1, alpha = 0.5, colour = "grey30") +
geom_point(data = en_coord_cat, aes(x = NMDS1, y = NMDS2),
shape = "diamond", size = 4, alpha = 0.6, colour = "navy") +
geom_text(data = en_coord_cat, aes(x = NMDS1, y = NMDS2+0.04),
label = row.names(en_coord_cat), colour = "navy", fontface = "bold") +
# geom_text(data = en_coord_cont, aes(x = NMDS1, y = NMDS2), colour = "grey30",
#           fontface = "bold", label = row.names(en_coord_cont)) +
theme(axis.title = element_text(size = 10, face = "bold", colour = "grey30"),
panel.background = element_blank(), panel.border = element_rect(fill = NA, colour = "grey30"),
axis.ticks = element_blank(), axis.text = element_blank(), legend.key = element_blank(),
legend.title = element_text(size = 10, face = "bold", colour = "grey30"),
legend.text = element_text(size = 9, colour = "grey30")) +
labs(colour = "Diabetes_Status")
geom_segment(aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
data = en_coord_cont, size =1, alpha = 0.5, colour = "grey30") +
# geom_point(data = en_coord_cat, aes(x = NMDS1, y = NMDS2),
#            shape = "diamond", size = 4, alpha = 0.6, colour = "navy") +
# geom_text(data = en_coord_cat, aes(x = NMDS1, y = NMDS2+0.04),
#           label = row.names(en_coord_cat), colour = "navy", fontface = "bold") +
# geom_text(data = en_coord_cont, aes(x = NMDS1, y = NMDS2), colour = "grey30",
#           fontface = "bold", label = row.names(en_coord_cont)) +
theme(axis.title = element_text(size = 10, face = "bold", colour = "grey30"),
panel.background = element_blank(), panel.border = element_rect(fill = NA, colour = "grey30"),
axis.ticks = element_blank(), axis.text = element_blank(), legend.key = element_blank(),
legend.title = element_text(size = 10, face = "bold", colour = "grey30"),
legend.text = element_text(size = 9, colour = "grey30")) +
labs(colour = "Diabetes_Status")
geom_segment(aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
data = en_coord_cont, size =1, alpha = 0.5, colour = "grey30") +
# geom_point(data = en_coord_cat, aes(x = NMDS1, y = NMDS2),
#            shape = "diamond", size = 4, alpha = 0.6, colour = "navy") +
# geom_text(data = en_coord_cat, aes(x = NMDS1, y = NMDS2+0.04),
#           label = row.names(en_coord_cat), colour = "navy", fontface = "bold") +
# geom_text(data = en_coord_cont, aes(x = NMDS1, y = NMDS2), colour = "grey30",
#           fontface = "bold", label = row.names(en_coord_cont)) +
# theme(axis.title = element_text(size = 10, face = "bold", colour = "grey30"),
#       panel.background = element_blank(), panel.border = element_rect(fill = NA, colour = "grey30"),
#       axis.ticks = element_blank(), axis.text = element_blank(), legend.key = element_blank(),
#       legend.title = element_text(size = 10, face = "bold", colour = "grey30"),
#       legend.text = element_text(size = 9, colour = "grey30")) +
labs(colour = "Diabetes_Status")
env
en_coord_cont = as.data.frame(scores(en, "vectors")) * ordiArrowMul(en)
en_coord_cat = as.data.frame(scores(en, "factors")) * ordiArrowMul(en)
geom_segment(aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
data = en_coord_cont, size =1, alpha = 0.5, colour = "grey30") +
geom_point(data = en_coord_cat, aes(x = NMDS1, y = NMDS2),
shape = "diamond", size = 4, alpha = 0.6, colour = "navy") +
geom_text(data = en_coord_cat, aes(x = NMDS1, y = NMDS2+0.04),
label = row.names(en_coord_cat), colour = "navy", fontface = "bold") +
geom_text(data = en_coord_cont, aes(x = NMDS1, y = NMDS2), colour = "grey30",
fontface = "bold", label = row.names(en_coord_cont)) +
theme(axis.title = element_text(size = 10, face = "bold", colour = "grey30"),
panel.background = element_blank(), panel.border = element_rect(fill = NA, colour = "grey30"),
axis.ticks = element_blank(), axis.text = element_blank(), legend.key = element_blank(),
legend.title = element_text(size = 10, face = "bold", colour = "grey30"),
legend.text = element_text(size = 9, colour = "grey30")) +
labs(colour = "Diabetes_Status")
gg = ggplot(data = data.scores, aes(x = NMDS1, y = NMDS2)) +
geom_point(data = data.scores, aes(colour = Diabetes_Status), size = 3, alpha = 0.5) +
scale_colour_manual(values = my_pal)+#c("orange", "steelblue"))  +
geom_segment(aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
data = en_coord_cont, size =1, alpha = 0.5, colour = "grey30") +
geom_point(data = en_coord_cat, aes(x = NMDS1, y = NMDS2),
shape = "diamond", size = 4, alpha = 0.6, colour = "navy") +
geom_text(data = en_coord_cat, aes(x = NMDS1, y = NMDS2+0.04),
label = row.names(en_coord_cat), colour = "navy", fontface = "bold") +
geom_text(data = en_coord_cont, aes(x = NMDS1, y = NMDS2), colour = "grey30",
fontface = "bold", label = row.names(en_coord_cont)) +
theme(axis.title = element_text(size = 10, face = "bold", colour = "grey30"),
panel.background = element_blank(), panel.border = element_rect(fill = NA, colour = "grey30"),
axis.ticks = element_blank(), axis.text = element_blank(), legend.key = element_blank(),
legend.title = element_text(size = 10, face = "bold", colour = "grey30"),
legend.text = element_text(size = 9, colour = "grey30")) +
labs(colour = "Diabetes_Status")
gg
en
anova(betadisper(wuni, sam$Diabetes_Status)) # 0.002
anova(betadisper(wuni, sam$BMI)) # 0.002
anova(betadisper(uni, sam$Diabetes_Status)) # 0.002
anova(betadisper(wuni, sam$Diabetes_Status)) # 0.002
anova(betadisper(uni, sam$Diabetes_Status)) # 0.002
betadisper(wuni, sam$Diabetes_Status)
adonis2(uni~Diabetes_Status,data = sam,permutations = 9999) # 0.003
adonis2(wuni~Diabetes_Status,data = sam,permutations = 9999) # 0.003
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "Diabetes_Status",
rug = F,
shape = "Sex",
xlab = "Axis 1 [85.8%]",
ylab = "Axis 2 [13%]",
title = "Weighted Unifrac",
palette = my_pal,
# label = "SampleID",
ellipse = T,
ellipse.border.remove = F,
ellipse.alpha = 0,ellipse.level = 0.95,
star.plot = T
# add = "reg.line"
) + coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
theme_pubr(legend = "right") #+
vst_pcoa
bray_vst_pcoa <- ordinate(vst_physeq,
method="MDS",
distance="bray")
vst_pcoa$values
eigen_vals <- vst_pcoa$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples
color_pal<-list(Diabetes_Status=c("sT2D"="#FF7100","HC"="#240A94"))
plot_ordination(vst_physeq, vst_pcoa, color="Diabetes_Status") +
geom_point(size=1) +
labs(col="Diabetes_Status") +
# geom_text(aes(label=rownames(sam), hjust=0.3, vjust=-0.4)) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
scale_color_manual(values=my_pal)+
theme_bw() +
theme(legend.position="none")
################################################################################
res<-vst_pcoa$vectors
res
res<-data.frame(res)%>%mutate(SampleID=rownames(res))
res2<-full_join(res,sam)
res2<-res2%>%mutate(BMI=as.numeric(BMI))
res2<-as_tibble(res2)
res2<-res2%>%mutate(Sex=factor(Sex,levels=c("Male","Female")))
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "Diabetes_Status",
rug = F,
shape = "Sex",
xlab = "Axis 1 [23.6%]",
ylab = "Axis 2 [13.9%]",
title = "Unweighted Unifrac",
palette = my_pal,
ellipse = T,
ellipse.border.remove = F,
ellipse.alpha = 0,ellipse.level = 0.95,
star.plot = T
# add = "reg.line"
) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
theme_pubr(legend = "right") #+
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,
shape = "Sex",
xlab = "Axis 1 [23.6%]",
ylab = "Axis 2 [13.9%]",
title = "Unweighted Unifrac",
palette = my_pal,
ellipse = T,
ellipse.border.remove = F,
ellipse.alpha = 0,ellipse.level = 0.95,
star.plot = T
# add = "reg.line"
) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
theme_pubr(legend = "right") #+
res2
res2$BMI
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,
shape = "Sex",
# xlab = "Axis 1 [23.6%]",
# ylab = "Axis 2 [13.9%]",
# title = "Unweighted Unifrac",
# palette = my_pal,
ellipse = T,
ellipse.border.remove = F,
ellipse.alpha = 0,ellipse.level = 0.95,
star.plot = T
# add = "reg.line"
) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
theme_pubr(legend = "right") #+
################################################################################
res<-vst_pcoa$vectors
res
res<-data.frame(res)%>%mutate(SampleID=rownames(res))
res2<-full_join(res,sam)
res2<-res2%>%mutate(BMI=as.numeric(BMI))
res2<-as_tibble(res2)
res2<-res2%>%mutate(Sex=factor(Sex,levels=c("Male","Female")))
res2$BMI
res2
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,
shape = "Sex",
# xlab = "Axis 1 [23.6%]",
# ylab = "Axis 2 [13.9%]",
# title = "Unweighted Unifrac",
# palette = my_pal,
ellipse = T,
ellipse.border.remove = F,
ellipse.alpha = 0,ellipse.level = 0.95,
star.plot = T
# add = "reg.line"
) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
theme_pubr(legend = "right") #+
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,
shape = "Sex",
# xlab = "Axis 1 [23.6%]",
# ylab = "Axis 2 [13.9%]",
# title = "Unweighted Unifrac",
# palette = my_pal,
ellipse = T,
ellipse.border.remove = F,
ellipse.alpha = 0,ellipse.level = 0.95,
star.plot = T
# add = "reg.line"
) +
# coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
theme_pubr(legend = "right") #+
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,
shape = "Sex",
# xlab = "Axis 1 [23.6%]",
# ylab = "Axis 2 [13.9%]",
# title = "Unweighted Unifrac",
# palette = my_pal,
ellipse = T,
ellipse.border.remove = F,
ellipse.alpha = 0,ellipse.level = 0.95,
star.plot = T
# add = "reg.line"
) +
# coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
theme_pubr(legend = "right") +
scale_color_viridis_c()
res2
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,
# shape = "Sex",
# xlab = "Axis 1 [23.6%]",
# ylab = "Axis 2 [13.9%]",
# title = "Unweighted Unifrac",
# palette = my_pal,
ellipse = T,
ellipse.border.remove = F,
ellipse.alpha = 0,ellipse.level = 0.95,
star.plot = T
# add = "reg.line"
) +
# coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
theme_pubr(legend = "right") +
scale_color_viridis_c()
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI")
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F)
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F) +scale_color_viridis_c()
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,ellipse = T) +scale_color_viridis_c()
library(DESeq2)
library(phyloseq)
sample_names(ps)
unweighted_vst_pcoa$vectors
vst_pcoa$values
ps <- readRDS("K:/github/lmatz/ps.RDS")
ps
#############################################
tax_phy<-tax_table(ps)
sam_phy<-sample_data(ps)
tree_phy<-phy_tree(ps)
vst_physeq <- phyloseq(vst_count_phy,tax_phy,sam_phy,tree_phy)
meta(vst_physeq)
# generating and visualizing the PCoA with phyloseq
unweighted_vst_pcoa <- ordinate(vst_physeq,
method="MDS",
distance="unifrac")
weighted_vst_pcoa <- ordinate(vst_physeq,
method="MDS",
distance="wunifrac")
vst_pcoa <- ordinate(vst_physeq,
method="MDS",
distance="bray")
vst_pcoa$values
sample_names(ps)
unweighted_vst_pcoa$vectors
eigen_vals <- vst_pcoa$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples
color_pal<-list(Diabetes_Status=c("sT2D"="#FF7100","HC"="#240A94"))
my_pal<-c("#240A94","#FF7100")
plot_ordination(vst_physeq, vst_pcoa, color="Diabetes_Status") +
geom_point(size=1) +
labs(col="Diabetes_Status") +
# geom_text(aes(label=rownames(sam), hjust=0.3, vjust=-0.4)) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
scale_color_manual(values=my_pal)+
theme_bw() +
theme(legend.position="none")
vst_pcoa
vst_physeq <- phyloseq(vst_count_phy,tax_phy,sam_phy,tree_phy)
counts<-data.frame(otu_table(ps))
deseq_counts <- DESeqDataSetFromMatrix(counts, colData = sam, design = ~Diabetes_Status)
deseq_counts_vst <- varianceStabilizingTransformation(deseq_counts)
deseq_counts_vst
library(DESeq2)
sam<-data.frame(sample_data(ps))
sam$Diabetes_Status
counts<-data.frame(otu_table(ps))
deseq_counts <- DESeqDataSetFromMatrix(counts, colData = sam, design = ~Diabetes_Status)
deseq_counts_vst <- varianceStabilizingTransformation(deseq_counts)
deseq_counts_vst
vst_trans_count_tab <- assay(deseq_counts_vst)
vst_trans_count_tab
# and calculating our Euclidean distance matrix
euc_dist <- dist(t(vst_trans_count_tab))
euc_clust <- hclust(euc_dist, method="ward.D2")
# hclust objects like this can be plotted with the generic plot() function
plot(euc_clust)
# making our phyloseq object with transformed table
vst_count_phy <- otu_table(vst_trans_count_tab, taxa_are_rows=T)
sample_info_tab_phy <- sample_data(sam)
tax
ps
#############################################
tax_phy<-tax_table(ps)
sam_phy<-sample_data(ps)
tree_phy<-phy_tree(ps)
vst_physeq <- phyloseq(vst_count_phy,tax_phy,sam_phy,tree_phy)
meta(vst_physeq)
# generating and visualizing the PCoA with phyloseq
unweighted_vst_pcoa <- ordinate(vst_physeq,
method="MDS",
distance="unifrac")
weighted_vst_pcoa <- ordinate(vst_physeq,
method="MDS",
distance="wunifrac")
vst_pcoa <- ordinate(vst_physeq,
method="MDS",
distance="bray")
vst_pcoa$values
sample_names(ps)
unweighted_vst_pcoa$vectors
eigen_vals <- vst_pcoa$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples
vst_physeq <- phyloseq(vst_count_phy,tax_phy,sam_phy,tree_phy)
vst_pcoa <- ordinate(vst_physeq,
method="MDS",
distance="bray")
vst_pcoa <- ordinate(ps,
method="MDS",
distance="bray")
vst_pcoa$values
sample_names(ps)
unweighted_vst_pcoa$vectors
eigen_vals <- vst_pcoa$values$Eigenvalues # allows us to scale the axes according to their magnitude of separating apart the samples
color_pal<-list(Diabetes_Status=c("sT2D"="#FF7100","HC"="#240A94"))
my_pal<-c("#240A94","#FF7100")
plot_ordination(vst_physeq, vst_pcoa, color="Diabetes_Status") +
geom_point(size=1) +
labs(col="Diabetes_Status") +
# geom_text(aes(label=rownames(sam), hjust=0.3, vjust=-0.4)) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
scale_color_manual(values=my_pal)+
theme_bw() +
theme(legend.position="none")
vst_physeq
plot_ordination(vst_physeq, vst_pcoa, color="Diabetes_Status") +
geom_point(size=1) +
labs(col="Diabetes_Status") +
# geom_text(aes(label=rownames(sam), hjust=0.3, vjust=-0.4)) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
scale_color_manual(values=my_pal)+
theme_bw() +
theme(legend.position="none")
plot_ordination(vst_physeq, vst_pcoa, color="Diabetes_Status") +
# geom_point(size=1) +
labs(col="Diabetes_Status") +
# geom_text(aes(label=rownames(sam), hjust=0.3, vjust=-0.4)) +
coord_fixed(sqrt(eigen_vals[2]/eigen_vals[1])) + ggtitle("PCoA") +
scale_color_manual(values=my_pal)+
theme_bw() +
theme(legend.position="none")
plot_ordination(vst_physeq, vst_pcoa, color="Diabetes_Status") #+
################################################################################
res<-vst_pcoa$vectors
res
res<-data.frame(res)%>%mutate(SampleID=rownames(res))
res2<-full_join(res,sam)
res2<-res2%>%mutate(BMI=as.numeric(BMI))
res2<-as_tibble(res2)
res2<-res2%>%mutate(Sex=factor(Sex,levels=c("Male","Female")))
res2$BMI
res2
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,ellipse = T) +scale_color_viridis_c()
library(ggpubr)
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,ellipse = T) +scale_color_viridis_c()
res2
################################################################################
res<-vst_pcoa$vectors
res
res<-data.frame(res)%>%mutate(SampleID=rownames(res))
sam<-data.frame(sample_data(ps))
res2<-full_join(res,sam)
sam
res
res2<-full_join(res,sam)
res
sam
res
res2<-full_join(res,sam)
library(tidyverse)
res2<-full_join(res,sam)
res2<-res2%>%mutate(BMI=as.numeric(BMI))
res2<-as_tibble(res2)
res2<-res2%>%mutate(Sex=factor(Sex,levels=c("Male","Female")))
res2$BMI
res2
library(ggpubr)
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F,ellipse = T) +scale_color_viridis_c()
ggscatter(data = res2,
x = "Axis.1",
y = "Axis.2",
color = "BMI",
rug = F) +scale_color_viridis_c()
library(vegan)
citation("vegan")
en = envfit(vst_pcoa,
env%>%
select(BMI,Diabetes_Status,Age),
permutations=999,
na.rm=TRUE)
vst_pcoa$values
nmds
m_com
#convert com to a matrix
m_com = as.matrix(otu_table(ps))
env<-data.frame(sample_data(ps))
#nmds code
set.seed(123)
m_com
nmds = metaMDS(t(m_com), distance = "bray")
nmds
nmds = metaMDS(t(m_com), distance = "unifrac")
m_com
